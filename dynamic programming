#include<bits/stdc++.h>
using namespace std;

//recursive approach time : O(2^n) space: O(1)

int max_profit(int wt[],int val[],int w,int n){
    if(w==0 || n==0){
        return 0;
    }

    if(wt[n-1]<=w){
        return max(val[n-1]+max_profit(wt,val,w-wt[n-1],n-1),max_profit(wt,val,w,n-1));
    }
    else{
        return max_profit(wt,val,w,n-1);
    }
}

int main(){
    int val[]={60, 100, 120 };
    int wt[]={10, 20, 30 };
    int w=50;
    int n=sizeof(wt)/sizeof(wt[0]);
    cout<<max_profit(wt,val,w,n);
    return 0;
}


//recursive +memoization   time: O(n*w)  space: O(n*w)

int max_profit(int wt[],int val[],int w,int n){
    int t[n+1][w+1];
    memset(t,-1,sizeof(t));

    if(w==0 || n==0){
        return 0;
    }

    if(t[n][w]!=-1){
        return t[n][w];
    }

    if(wt[n-1]<=w){
        t[n][w]=max(val[n-1]+max_profit(wt,val,w-wt[n-1],n-1),max_profit(wt,val,w,n-1));
        return t[n][w];
    }
    else{
        t[n][w]=max_profit(wt,val,w,n-1);
        return t[n][w];
    }
}

int main(){
    int val[]={60, 100, 120};
    int wt[]={10, 20, 30};
    int w=50;
    int n=sizeof(wt)/sizeof(wt[0]);
    cout<<max_profit(wt,val,w,n);
    return 0;
}
